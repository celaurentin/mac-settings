# Prompt colors. Includes history number, date, time, and git display.
function __prompt_command() {
  local EXIT="$?" # Exit status determines history number color
  PS1=""

  # Display history number with color.
  # Green    Previous command succeeded.
  # Red      Previous command failed.
  if [ $EXIT -eq 0 ]; then
    PS1+="\[$prompt_color_green\][\!]\[$prompt_color_reset\] ";
  else
    PS1+="\[$prompt_color_red\][\!]\[$prompt_color_reset\] ";
  fi

	prompt_date=$(date '+%Y/%m/%d %H:%M %A')
	prompt_username="\u"
	prompt_directory="\w"

  PS1+="\[$prompt_color_orange\]$prompt_date\[$prompt_color_reset\]  "
  PS1+="\[$prompt_color_magenta\]$prompt_username\[$prompt_color_reset\] "
  PS1+="\[$prompt_color_white\]in\[$prompt_color_reset\] "
  PS1+="\[$prompt_color_blue\]$prompt_directory\[$prompt_color_reset\] "

  # Display git branch when in repo with helper message in appropriate color.
  local git_status="`git status -unormal 2>&1`"
  if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
    if [[ "$git_status" =~ Untracked\ files ]] \
          || [[ "$git_status" =~ Changes\ not\ staged ]]; then
      local git_color=$prompt_color_red
      local git_message="there's something to add"
    elif [[ "$git_status" =~ Changes\ to\ be\ committed ]]; then
      local git_color=$prompt_color_orange
      local git_message="there's something to commit"
    elif [[ "$git_status" =~ Your\ branch\ is\ ahead\ of ]]; then
      local git_color=$prompt_color_yellow
      local git_message="there's something to push"
    else
      local git_color=$prompt_color_green
      local git_message="everything is up-to-date"
    fi

    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
        local git_branch=${BASH_REMATCH[1]}
    else # Detached HEAD
        local git_branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`)"
    fi

    PS1+="\[$prompt_color_white\]on\[$prompt_color_reset\] "
    PS1+="\[$prompt_color_pink\]$git_branch\[$prompt_color_reset\] "
    PS1+="\[$prompt_color_white\]where\[$prompt_color_reset\] "
    PS1+="\[$git_color\]$git_message\[$prompt_color_reset\]"
  fi

  PS1+="\n\[$prompt_color_cyan\]тед\[$prompt_color_reset\] "       # new line
}
PROMPT_COMMAND=__prompt_command

PS2="\[$prompt_color_cyan\]тед\[$prompt_color_reset\] "            # contined line after \


# Use the following command to view all 256 tput colors with their associated numeric values.
# The number is limited by mod 256.
#
# for i in {0..255}; do tput setab $i; echo -n "  $i  "; done; tput sgr0; echo; unset i

